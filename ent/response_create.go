// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/answer"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/response"
	"github.com/occult/pagode/ent/user"
)

// ResponseCreate is the builder for creating a Response entity.
type ResponseCreate struct {
	config
	mutation *ResponseMutation
	hooks    []Hook
}

// SetSubmittedAt sets the "submitted_at" field.
func (rc *ResponseCreate) SetSubmittedAt(t time.Time) *ResponseCreate {
	rc.mutation.SetSubmittedAt(t)
	return rc
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableSubmittedAt(t *time.Time) *ResponseCreate {
	if t != nil {
		rc.SetSubmittedAt(*t)
	}
	return rc
}

// SetCompleted sets the "completed" field.
func (rc *ResponseCreate) SetCompleted(b bool) *ResponseCreate {
	rc.mutation.SetCompleted(b)
	return rc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableCompleted(b *bool) *ResponseCreate {
	if b != nil {
		rc.SetCompleted(*b)
	}
	return rc
}

// SetIPAddress sets the "ip_address" field.
func (rc *ResponseCreate) SetIPAddress(s string) *ResponseCreate {
	rc.mutation.SetIPAddress(s)
	return rc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableIPAddress(s *string) *ResponseCreate {
	if s != nil {
		rc.SetIPAddress(*s)
	}
	return rc
}

// SetUserAgent sets the "user_agent" field.
func (rc *ResponseCreate) SetUserAgent(s string) *ResponseCreate {
	rc.mutation.SetUserAgent(s)
	return rc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableUserAgent(s *string) *ResponseCreate {
	if s != nil {
		rc.SetUserAgent(*s)
	}
	return rc
}

// SetFormID sets the "form" edge to the Form entity by ID.
func (rc *ResponseCreate) SetFormID(id int) *ResponseCreate {
	rc.mutation.SetFormID(id)
	return rc
}

// SetForm sets the "form" edge to the Form entity.
func (rc *ResponseCreate) SetForm(f *Form) *ResponseCreate {
	return rc.SetFormID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rc *ResponseCreate) SetUserID(id int) *ResponseCreate {
	rc.mutation.SetUserID(id)
	return rc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (rc *ResponseCreate) SetNillableUserID(id *int) *ResponseCreate {
	if id != nil {
		rc = rc.SetUserID(*id)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ResponseCreate) SetUser(u *User) *ResponseCreate {
	return rc.SetUserID(u.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (rc *ResponseCreate) AddAnswerIDs(ids ...int) *ResponseCreate {
	rc.mutation.AddAnswerIDs(ids...)
	return rc
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (rc *ResponseCreate) AddAnswers(a ...*Answer) *ResponseCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddAnswerIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (rc *ResponseCreate) Mutation() *ResponseMutation {
	return rc.mutation
}

// Save creates the Response in the database.
func (rc *ResponseCreate) Save(ctx context.Context) (*Response, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResponseCreate) SaveX(ctx context.Context) *Response {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResponseCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResponseCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResponseCreate) defaults() {
	if _, ok := rc.mutation.SubmittedAt(); !ok {
		v := response.DefaultSubmittedAt()
		rc.mutation.SetSubmittedAt(v)
	}
	if _, ok := rc.mutation.Completed(); !ok {
		v := response.DefaultCompleted
		rc.mutation.SetCompleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResponseCreate) check() error {
	if _, ok := rc.mutation.SubmittedAt(); !ok {
		return &ValidationError{Name: "submitted_at", err: errors.New(`ent: missing required field "Response.submitted_at"`)}
	}
	if _, ok := rc.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New(`ent: missing required field "Response.completed"`)}
	}
	if len(rc.mutation.FormIDs()) == 0 {
		return &ValidationError{Name: "form", err: errors.New(`ent: missing required edge "Response.form"`)}
	}
	return nil
}

func (rc *ResponseCreate) sqlSave(ctx context.Context) (*Response, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResponseCreate) createSpec() (*Response, *sqlgraph.CreateSpec) {
	var (
		_node = &Response{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(response.Table, sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.SubmittedAt(); ok {
		_spec.SetField(response.FieldSubmittedAt, field.TypeTime, value)
		_node.SubmittedAt = value
	}
	if value, ok := rc.mutation.Completed(); ok {
		_spec.SetField(response.FieldCompleted, field.TypeBool, value)
		_node.Completed = value
	}
	if value, ok := rc.mutation.IPAddress(); ok {
		_spec.SetField(response.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := rc.mutation.UserAgent(); ok {
		_spec.SetField(response.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if nodes := rc.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.FormTable,
			Columns: []string{response.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.form_responses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.UserTable,
			Columns: []string{response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_responses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.AnswersTable,
			Columns: []string{response.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResponseCreateBulk is the builder for creating many Response entities in bulk.
type ResponseCreateBulk struct {
	config
	err      error
	builders []*ResponseCreate
}

// Save creates the Response entities in the database.
func (rcb *ResponseCreateBulk) Save(ctx context.Context) ([]*Response, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Response, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResponseCreateBulk) SaveX(ctx context.Context) []*Response {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResponseCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
