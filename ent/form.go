// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/user"
)

// Form is the model entity for the Form schema.
type Form struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Published holds the value of the "published" field.
	Published bool `json:"published,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormQuery when eager-loading is set.
	Edges        FormEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FormEdges holds the relations/edges for other nodes in the graph.
type FormEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// Responses holds the value of the responses edge.
	Responses []*Response `json:"responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e FormEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[1] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e FormEdges) ResponsesOrErr() ([]*Response, error) {
	if e.loadedTypes[2] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Form) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case form.FieldPublished:
			values[i] = new(sql.NullBool)
		case form.FieldID, form.FieldUserID:
			values[i] = new(sql.NullInt64)
		case form.FieldTitle, form.FieldDescription, form.FieldSlug:
			values[i] = new(sql.NullString)
		case form.FieldCreatedAt, form.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Form fields.
func (f *Form) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case form.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case form.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case form.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case form.FieldPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field published", values[i])
			} else if value.Valid {
				f.Published = value.Bool
			}
		case form.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				f.Slug = value.String
			}
		case form.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				f.UserID = int(value.Int64)
			}
		case form.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case form.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Form.
// This includes values selected through modifiers, order, etc.
func (f *Form) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Form entity.
func (f *Form) QueryOwner() *UserQuery {
	return NewFormClient(f.config).QueryOwner(f)
}

// QueryQuestions queries the "questions" edge of the Form entity.
func (f *Form) QueryQuestions() *QuestionQuery {
	return NewFormClient(f.config).QueryQuestions(f)
}

// QueryResponses queries the "responses" edge of the Form entity.
func (f *Form) QueryResponses() *ResponseQuery {
	return NewFormClient(f.config).QueryResponses(f)
}

// Update returns a builder for updating this Form.
// Note that you need to call Form.Unwrap() before calling this method if this Form
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Form) Update() *FormUpdateOne {
	return NewFormClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Form entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Form) Unwrap() *Form {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Form is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Form) String() string {
	var builder strings.Builder
	builder.WriteString("Form(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("published=")
	builder.WriteString(fmt.Sprintf("%v", f.Published))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(f.Slug)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Forms is a parsable slice of Form.
type Forms []*Form
