// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/response"
	"github.com/occult/pagode/ent/user"
)

// Response is the model entity for the Response schema.
type Response struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SubmittedAt holds the value of the "submitted_at" field.
	SubmittedAt time.Time `json:"submitted_at,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// IPAddress holds the value of the "IPAddress" field.
	IPAddress string `json:"ip_address"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent string `json:"user_agent"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResponseQuery when eager-loading is set.
	Edges          ResponseEdges `json:"edges"`
	form_responses *int
	user_responses *int
	selectValues   sql.SelectValues
}

// ResponseEdges holds the relations/edges for other nodes in the graph.
type ResponseEdges struct {
	// Form holds the value of the form edge.
	Form *Form `json:"form,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Answers holds the value of the answers edge.
	Answers []*Answer `json:"answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FormOrErr returns the Form value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) FormOrErr() (*Form, error) {
	if e.Form != nil {
		return e.Form, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: form.Label}
	}
	return nil, &NotLoadedError{edge: "form"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AnswersOrErr returns the Answers value or an error if the edge
// was not loaded in eager-loading.
func (e ResponseEdges) AnswersOrErr() ([]*Answer, error) {
	if e.loadedTypes[2] {
		return e.Answers, nil
	}
	return nil, &NotLoadedError{edge: "answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Response) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case response.FieldCompleted:
			values[i] = new(sql.NullBool)
		case response.FieldID:
			values[i] = new(sql.NullInt64)
		case response.FieldIPAddress, response.FieldUserAgent:
			values[i] = new(sql.NullString)
		case response.FieldSubmittedAt:
			values[i] = new(sql.NullTime)
		case response.ForeignKeys[0]: // form_responses
			values[i] = new(sql.NullInt64)
		case response.ForeignKeys[1]: // user_responses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Response fields.
func (r *Response) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case response.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case response.FieldSubmittedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_at", values[i])
			} else if value.Valid {
				r.SubmittedAt = value.Time
			}
		case response.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				r.Completed = value.Bool
			}
		case response.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IPAddress", values[i])
			} else if value.Valid {
				r.IPAddress = value.String
			}
		case response.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				r.UserAgent = value.String
			}
		case response.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field form_responses", value)
			} else if value.Valid {
				r.form_responses = new(int)
				*r.form_responses = int(value.Int64)
			}
		case response.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_responses", value)
			} else if value.Valid {
				r.user_responses = new(int)
				*r.user_responses = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Response.
// This includes values selected through modifiers, order, etc.
func (r *Response) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryForm queries the "form" edge of the Response entity.
func (r *Response) QueryForm() *FormQuery {
	return NewResponseClient(r.config).QueryForm(r)
}

// QueryUser queries the "user" edge of the Response entity.
func (r *Response) QueryUser() *UserQuery {
	return NewResponseClient(r.config).QueryUser(r)
}

// QueryAnswers queries the "answers" edge of the Response entity.
func (r *Response) QueryAnswers() *AnswerQuery {
	return NewResponseClient(r.config).QueryAnswers(r)
}

// Update returns a builder for updating this Response.
// Note that you need to call Response.Unwrap() before calling this method if this Response
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Response) Update() *ResponseUpdateOne {
	return NewResponseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Response entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Response) Unwrap() *Response {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Response is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Response) String() string {
	var builder strings.Builder
	builder.WriteString("Response(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("submitted_at=")
	builder.WriteString(r.SubmittedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(fmt.Sprintf("%v", r.Completed))
	builder.WriteString(", ")
	builder.WriteString("IPAddress=")
	builder.WriteString(r.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("UserAgent=")
	builder.WriteString(r.UserAgent)
	builder.WriteByte(')')
	return builder.String()
}

// Responses is a parsable slice of Response.
type Responses []*Response
