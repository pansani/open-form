// Code generated by ent, DO NOT EDIT.
package admin

import (
	"time"

	"github.com/occult/pagode/ent/paymentintent"
	"github.com/occult/pagode/ent/paymentmethod"
	"github.com/occult/pagode/ent/question"
	"github.com/occult/pagode/ent/subscription"
)

type Answer struct {
	Value     string     `form:"value"`
	CreatedAt *time.Time `form:"created_at"`
}

type Form struct {
	Title       string     `form:"title"`
	Description *string    `form:"description"`
	Published   bool       `form:"published"`
	Slug        string     `form:"slug"`
	UserID      int        `form:"user_id"`
	CreatedAt   *time.Time `form:"created_at"`
	UpdatedAt   *time.Time `form:"updated_at"`
}

type PasswordToken struct {
	Token     *string    `form:"token"`
	UserID    int        `form:"user_id"`
	CreatedAt *time.Time `form:"created_at"`
}

type PaymentCustomer struct {
	ProviderCustomerID string                  `form:"provider_customer_id"`
	Provider           *string                 `form:"provider"`
	Email              string                  `form:"email"`
	Name               *string                 `form:"name"`
	Metadata           *map[string]interface{} `form:"metadata"`
	CreatedAt          *time.Time              `form:"created_at"`
	UpdatedAt          *time.Time              `form:"updated_at"`
}

type PaymentIntent struct {
	ProviderPaymentIntentID string                  `form:"provider_payment_intent_id"`
	Provider                *string                 `form:"provider"`
	Status                  *paymentintent.Status   `form:"status"`
	Amount                  int64                   `form:"amount"`
	Currency                *string                 `form:"currency"`
	Description             *string                 `form:"description"`
	ClientSecret            *string                 `form:"client_secret"`
	Metadata                *map[string]interface{} `form:"metadata"`
	CreatedAt               *time.Time              `form:"created_at"`
	UpdatedAt               *time.Time              `form:"updated_at"`
}

type PaymentMethod struct {
	ProviderPaymentMethodID string                  `form:"provider_payment_method_id"`
	Provider                *string                 `form:"provider"`
	Type                    *paymentmethod.Type     `form:"type"`
	LastFour                *string                 `form:"last_four"`
	Brand                   *string                 `form:"brand"`
	ExpMonth                *int                    `form:"exp_month"`
	ExpYear                 *int                    `form:"exp_year"`
	IsDefault               bool                    `form:"is_default"`
	Metadata                *map[string]interface{} `form:"metadata"`
	CreatedAt               *time.Time              `form:"created_at"`
	UpdatedAt               *time.Time              `form:"updated_at"`
}

type Question struct {
	Type        *question.Type          `form:"type"`
	Title       string                  `form:"title"`
	Description *string                 `form:"description"`
	Placeholder *string                 `form:"placeholder"`
	Required    bool                    `form:"required"`
	Order       *int                    `form:"order"`
	Options     *map[string]interface{} `form:"options"`
	Validation  *map[string]interface{} `form:"validation"`
	CreatedAt   *time.Time              `form:"created_at"`
	UpdatedAt   *time.Time              `form:"updated_at"`
}

type Response struct {
	SubmittedAt *time.Time `form:"submitted_at"`
	Completed   bool       `form:"completed"`
	IPAddress   *string    `form:"ip_address"`
	UserAgent   *string    `form:"user_agent"`
}

type Subscription struct {
	ProviderSubscriptionID string                  `form:"provider_subscription_id"`
	Provider               *string                 `form:"provider"`
	Status                 *subscription.Status    `form:"status"`
	PriceID                string                  `form:"price_id"`
	Amount                 int64                   `form:"amount"`
	Currency               *string                 `form:"currency"`
	Interval               subscription.Interval   `form:"interval"`
	IntervalCount          *int                    `form:"interval_count"`
	CurrentPeriodStart     *time.Time              `form:"current_period_start"`
	CurrentPeriodEnd       *time.Time              `form:"current_period_end"`
	TrialStart             *time.Time              `form:"trial_start"`
	TrialEnd               *time.Time              `form:"trial_end"`
	CanceledAt             *time.Time              `form:"canceled_at"`
	EndedAt                *time.Time              `form:"ended_at"`
	Metadata               *map[string]interface{} `form:"metadata"`
	CreatedAt              *time.Time              `form:"created_at"`
	UpdatedAt              *time.Time              `form:"updated_at"`
}

type User struct {
	Name      string     `form:"name"`
	Email     string     `form:"email"`
	Password  *string    `form:"password"`
	Verified  bool       `form:"verified"`
	Admin     bool       `form:"admin"`
	CreatedAt *time.Time `form:"created_at"`
}

type EntityList struct {
	Columns     []string
	Entities    []EntityValues
	Page        int
	HasNextPage bool
}

type EntityValues struct {
	ID     int
	Values []string
}

type HandlerConfig struct {
	ItemsPerPage int
	PageQueryKey string
	TimeFormat   string
}

func GetEntityTypeNames() []string {
	return []string{
		"Answer",
		"Form",
		"PasswordToken",
		"PaymentCustomer",
		"PaymentIntent",
		"PaymentMethod",
		"Question",
		"Response",
		"Subscription",
		"User",
	}
}
