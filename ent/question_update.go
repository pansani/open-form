// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/answer"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/predicate"
	"github.com/occult/pagode/ent/question"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetType sets the "type" field.
func (qu *QuestionUpdate) SetType(q question.Type) *QuestionUpdate {
	qu.mutation.SetType(q)
	return qu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableType(q *question.Type) *QuestionUpdate {
	if q != nil {
		qu.SetType(*q)
	}
	return qu
}

// SetTitle sets the "title" field.
func (qu *QuestionUpdate) SetTitle(s string) *QuestionUpdate {
	qu.mutation.SetTitle(s)
	return qu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableTitle(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetTitle(*s)
	}
	return qu
}

// SetDescription sets the "description" field.
func (qu *QuestionUpdate) SetDescription(s string) *QuestionUpdate {
	qu.mutation.SetDescription(s)
	return qu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableDescription(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetDescription(*s)
	}
	return qu
}

// ClearDescription clears the value of the "description" field.
func (qu *QuestionUpdate) ClearDescription() *QuestionUpdate {
	qu.mutation.ClearDescription()
	return qu
}

// SetPlaceholder sets the "placeholder" field.
func (qu *QuestionUpdate) SetPlaceholder(s string) *QuestionUpdate {
	qu.mutation.SetPlaceholder(s)
	return qu
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillablePlaceholder(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetPlaceholder(*s)
	}
	return qu
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (qu *QuestionUpdate) ClearPlaceholder() *QuestionUpdate {
	qu.mutation.ClearPlaceholder()
	return qu
}

// SetRequired sets the "required" field.
func (qu *QuestionUpdate) SetRequired(b bool) *QuestionUpdate {
	qu.mutation.SetRequired(b)
	return qu
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableRequired(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetRequired(*b)
	}
	return qu
}

// SetOrder sets the "order" field.
func (qu *QuestionUpdate) SetOrder(i int) *QuestionUpdate {
	qu.mutation.ResetOrder()
	qu.mutation.SetOrder(i)
	return qu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableOrder(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetOrder(*i)
	}
	return qu
}

// AddOrder adds i to the "order" field.
func (qu *QuestionUpdate) AddOrder(i int) *QuestionUpdate {
	qu.mutation.AddOrder(i)
	return qu
}

// SetOptions sets the "options" field.
func (qu *QuestionUpdate) SetOptions(m map[string]interface{}) *QuestionUpdate {
	qu.mutation.SetOptions(m)
	return qu
}

// ClearOptions clears the value of the "options" field.
func (qu *QuestionUpdate) ClearOptions() *QuestionUpdate {
	qu.mutation.ClearOptions()
	return qu
}

// SetValidation sets the "validation" field.
func (qu *QuestionUpdate) SetValidation(m map[string]interface{}) *QuestionUpdate {
	qu.mutation.SetValidation(m)
	return qu
}

// ClearValidation clears the value of the "validation" field.
func (qu *QuestionUpdate) ClearValidation() *QuestionUpdate {
	qu.mutation.ClearValidation()
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetFormID sets the "form" edge to the Form entity by ID.
func (qu *QuestionUpdate) SetFormID(id int) *QuestionUpdate {
	qu.mutation.SetFormID(id)
	return qu
}

// SetForm sets the "form" edge to the Form entity.
func (qu *QuestionUpdate) SetForm(f *Form) *QuestionUpdate {
	return qu.SetFormID(f.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddAnswerIDs(ids...)
	return qu
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qu *QuestionUpdate) AddAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearForm clears the "form" edge to the Form entity.
func (qu *QuestionUpdate) ClearForm() *QuestionUpdate {
	qu.mutation.ClearForm()
	return qu
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qu *QuestionUpdate) ClearAnswers() *QuestionUpdate {
	qu.mutation.ClearAnswers()
	return qu
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveAnswerIDs(ids...)
	return qu
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qu *QuestionUpdate) RemoveAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.GetType(); ok {
		if err := question.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Question.type": %w`, err)}
		}
	}
	if v, ok := qu.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Question.title": %w`, err)}
		}
	}
	if v, ok := qu.mutation.Order(); ok {
		if err := question.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Question.order": %w`, err)}
		}
	}
	if qu.mutation.FormCleared() && len(qu.mutation.FormIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.form"`)
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeEnum, value)
	}
	if value, ok := qu.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := qu.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if qu.mutation.DescriptionCleared() {
		_spec.ClearField(question.FieldDescription, field.TypeString)
	}
	if value, ok := qu.mutation.Placeholder(); ok {
		_spec.SetField(question.FieldPlaceholder, field.TypeString, value)
	}
	if qu.mutation.PlaceholderCleared() {
		_spec.ClearField(question.FieldPlaceholder, field.TypeString)
	}
	if value, ok := qu.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if value, ok := qu.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.Options(); ok {
		_spec.SetField(question.FieldOptions, field.TypeJSON, value)
	}
	if qu.mutation.OptionsCleared() {
		_spec.ClearField(question.FieldOptions, field.TypeJSON)
	}
	if value, ok := qu.mutation.Validation(); ok {
		_spec.SetField(question.FieldValidation, field.TypeJSON, value)
	}
	if qu.mutation.ValidationCleared() {
		_spec.ClearField(question.FieldValidation, field.TypeJSON)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetType sets the "type" field.
func (quo *QuestionUpdateOne) SetType(q question.Type) *QuestionUpdateOne {
	quo.mutation.SetType(q)
	return quo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableType(q *question.Type) *QuestionUpdateOne {
	if q != nil {
		quo.SetType(*q)
	}
	return quo
}

// SetTitle sets the "title" field.
func (quo *QuestionUpdateOne) SetTitle(s string) *QuestionUpdateOne {
	quo.mutation.SetTitle(s)
	return quo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableTitle(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetTitle(*s)
	}
	return quo
}

// SetDescription sets the "description" field.
func (quo *QuestionUpdateOne) SetDescription(s string) *QuestionUpdateOne {
	quo.mutation.SetDescription(s)
	return quo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableDescription(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetDescription(*s)
	}
	return quo
}

// ClearDescription clears the value of the "description" field.
func (quo *QuestionUpdateOne) ClearDescription() *QuestionUpdateOne {
	quo.mutation.ClearDescription()
	return quo
}

// SetPlaceholder sets the "placeholder" field.
func (quo *QuestionUpdateOne) SetPlaceholder(s string) *QuestionUpdateOne {
	quo.mutation.SetPlaceholder(s)
	return quo
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillablePlaceholder(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetPlaceholder(*s)
	}
	return quo
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (quo *QuestionUpdateOne) ClearPlaceholder() *QuestionUpdateOne {
	quo.mutation.ClearPlaceholder()
	return quo
}

// SetRequired sets the "required" field.
func (quo *QuestionUpdateOne) SetRequired(b bool) *QuestionUpdateOne {
	quo.mutation.SetRequired(b)
	return quo
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableRequired(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetRequired(*b)
	}
	return quo
}

// SetOrder sets the "order" field.
func (quo *QuestionUpdateOne) SetOrder(i int) *QuestionUpdateOne {
	quo.mutation.ResetOrder()
	quo.mutation.SetOrder(i)
	return quo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableOrder(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetOrder(*i)
	}
	return quo
}

// AddOrder adds i to the "order" field.
func (quo *QuestionUpdateOne) AddOrder(i int) *QuestionUpdateOne {
	quo.mutation.AddOrder(i)
	return quo
}

// SetOptions sets the "options" field.
func (quo *QuestionUpdateOne) SetOptions(m map[string]interface{}) *QuestionUpdateOne {
	quo.mutation.SetOptions(m)
	return quo
}

// ClearOptions clears the value of the "options" field.
func (quo *QuestionUpdateOne) ClearOptions() *QuestionUpdateOne {
	quo.mutation.ClearOptions()
	return quo
}

// SetValidation sets the "validation" field.
func (quo *QuestionUpdateOne) SetValidation(m map[string]interface{}) *QuestionUpdateOne {
	quo.mutation.SetValidation(m)
	return quo
}

// ClearValidation clears the value of the "validation" field.
func (quo *QuestionUpdateOne) ClearValidation() *QuestionUpdateOne {
	quo.mutation.ClearValidation()
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetFormID sets the "form" edge to the Form entity by ID.
func (quo *QuestionUpdateOne) SetFormID(id int) *QuestionUpdateOne {
	quo.mutation.SetFormID(id)
	return quo
}

// SetForm sets the "form" edge to the Form entity.
func (quo *QuestionUpdateOne) SetForm(f *Form) *QuestionUpdateOne {
	return quo.SetFormID(f.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddAnswerIDs(ids...)
	return quo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearForm clears the "form" edge to the Form entity.
func (quo *QuestionUpdateOne) ClearForm() *QuestionUpdateOne {
	quo.mutation.ClearForm()
	return quo
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearAnswers() *QuestionUpdateOne {
	quo.mutation.ClearAnswers()
	return quo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveAnswerIDs(ids...)
	return quo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveAnswerIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.GetType(); ok {
		if err := question.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Question.type": %w`, err)}
		}
	}
	if v, ok := quo.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Question.title": %w`, err)}
		}
	}
	if v, ok := quo.mutation.Order(); ok {
		if err := question.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Question.order": %w`, err)}
		}
	}
	if quo.mutation.FormCleared() && len(quo.mutation.FormIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.form"`)
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeEnum, value)
	}
	if value, ok := quo.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := quo.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if quo.mutation.DescriptionCleared() {
		_spec.ClearField(question.FieldDescription, field.TypeString)
	}
	if value, ok := quo.mutation.Placeholder(); ok {
		_spec.SetField(question.FieldPlaceholder, field.TypeString, value)
	}
	if quo.mutation.PlaceholderCleared() {
		_spec.ClearField(question.FieldPlaceholder, field.TypeString)
	}
	if value, ok := quo.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if value, ok := quo.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.Options(); ok {
		_spec.SetField(question.FieldOptions, field.TypeJSON, value)
	}
	if quo.mutation.OptionsCleared() {
		_spec.ClearField(question.FieldOptions, field.TypeJSON)
	}
	if value, ok := quo.mutation.Validation(); ok {
		_spec.SetField(question.FieldValidation, field.TypeJSON, value)
	}
	if quo.mutation.ValidationCleared() {
		_spec.ClearField(question.FieldValidation, field.TypeJSON)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
