// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/predicate"
	"github.com/occult/pagode/ent/question"
	"github.com/occult/pagode/ent/response"
	"github.com/occult/pagode/ent/user"
)

// FormUpdate is the builder for updating Form entities.
type FormUpdate struct {
	config
	hooks    []Hook
	mutation *FormMutation
}

// Where appends a list predicates to the FormUpdate builder.
func (fu *FormUpdate) Where(ps ...predicate.Form) *FormUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTitle sets the "title" field.
func (fu *FormUpdate) SetTitle(s string) *FormUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FormUpdate) SetNillableTitle(s *string) *FormUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FormUpdate) SetDescription(s string) *FormUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FormUpdate) SetNillableDescription(s *string) *FormUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FormUpdate) ClearDescription() *FormUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetPublished sets the "published" field.
func (fu *FormUpdate) SetPublished(b bool) *FormUpdate {
	fu.mutation.SetPublished(b)
	return fu
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (fu *FormUpdate) SetNillablePublished(b *bool) *FormUpdate {
	if b != nil {
		fu.SetPublished(*b)
	}
	return fu
}

// SetSlug sets the "slug" field.
func (fu *FormUpdate) SetSlug(s string) *FormUpdate {
	fu.mutation.SetSlug(s)
	return fu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (fu *FormUpdate) SetNillableSlug(s *string) *FormUpdate {
	if s != nil {
		fu.SetSlug(*s)
	}
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FormUpdate) SetUserID(i int) *FormUpdate {
	fu.mutation.SetUserID(i)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FormUpdate) SetNillableUserID(i *int) *FormUpdate {
	if i != nil {
		fu.SetUserID(*i)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FormUpdate) SetUpdatedAt(t time.Time) *FormUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fu *FormUpdate) SetOwnerID(id int) *FormUpdate {
	fu.mutation.SetOwnerID(id)
	return fu
}

// SetOwner sets the "owner" edge to the User entity.
func (fu *FormUpdate) SetOwner(u *User) *FormUpdate {
	return fu.SetOwnerID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (fu *FormUpdate) AddQuestionIDs(ids ...int) *FormUpdate {
	fu.mutation.AddQuestionIDs(ids...)
	return fu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (fu *FormUpdate) AddQuestions(q ...*Question) *FormUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.AddQuestionIDs(ids...)
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (fu *FormUpdate) AddResponseIDs(ids ...int) *FormUpdate {
	fu.mutation.AddResponseIDs(ids...)
	return fu
}

// AddResponses adds the "responses" edges to the Response entity.
func (fu *FormUpdate) AddResponses(r ...*Response) *FormUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.AddResponseIDs(ids...)
}

// Mutation returns the FormMutation object of the builder.
func (fu *FormUpdate) Mutation() *FormMutation {
	return fu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fu *FormUpdate) ClearOwner() *FormUpdate {
	fu.mutation.ClearOwner()
	return fu
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (fu *FormUpdate) ClearQuestions() *FormUpdate {
	fu.mutation.ClearQuestions()
	return fu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (fu *FormUpdate) RemoveQuestionIDs(ids ...int) *FormUpdate {
	fu.mutation.RemoveQuestionIDs(ids...)
	return fu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (fu *FormUpdate) RemoveQuestions(q ...*Question) *FormUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.RemoveQuestionIDs(ids...)
}

// ClearResponses clears all "responses" edges to the Response entity.
func (fu *FormUpdate) ClearResponses() *FormUpdate {
	fu.mutation.ClearResponses()
	return fu
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (fu *FormUpdate) RemoveResponseIDs(ids ...int) *FormUpdate {
	fu.mutation.RemoveResponseIDs(ids...)
	return fu
}

// RemoveResponses removes "responses" edges to Response entities.
func (fu *FormUpdate) RemoveResponses(r ...*Response) *FormUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.RemoveResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FormUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FormUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FormUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FormUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FormUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := form.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FormUpdate) check() error {
	if v, ok := fu.mutation.Title(); ok {
		if err := form.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Form.title": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Slug(); ok {
		if err := form.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Form.slug": %w`, err)}
		}
	}
	if fu.mutation.OwnerCleared() && len(fu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Form.owner"`)
	}
	return nil
}

func (fu *FormUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(form.Table, form.Columns, sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(form.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(form.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(form.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.Published(); ok {
		_spec.SetField(form.FieldPublished, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Slug(); ok {
		_spec.SetField(form.FieldSlug, field.TypeString, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(form.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form.OwnerTable,
			Columns: []string{form.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form.OwnerTable,
			Columns: []string{form.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !fu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !fu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FormUpdateOne is the builder for updating a single Form entity.
type FormUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormMutation
}

// SetTitle sets the "title" field.
func (fuo *FormUpdateOne) SetTitle(s string) *FormUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableTitle(s *string) *FormUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FormUpdateOne) SetDescription(s string) *FormUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableDescription(s *string) *FormUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FormUpdateOne) ClearDescription() *FormUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetPublished sets the "published" field.
func (fuo *FormUpdateOne) SetPublished(b bool) *FormUpdateOne {
	fuo.mutation.SetPublished(b)
	return fuo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillablePublished(b *bool) *FormUpdateOne {
	if b != nil {
		fuo.SetPublished(*b)
	}
	return fuo
}

// SetSlug sets the "slug" field.
func (fuo *FormUpdateOne) SetSlug(s string) *FormUpdateOne {
	fuo.mutation.SetSlug(s)
	return fuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableSlug(s *string) *FormUpdateOne {
	if s != nil {
		fuo.SetSlug(*s)
	}
	return fuo
}

// SetUserID sets the "user_id" field.
func (fuo *FormUpdateOne) SetUserID(i int) *FormUpdateOne {
	fuo.mutation.SetUserID(i)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableUserID(i *int) *FormUpdateOne {
	if i != nil {
		fuo.SetUserID(*i)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FormUpdateOne) SetUpdatedAt(t time.Time) *FormUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fuo *FormUpdateOne) SetOwnerID(id int) *FormUpdateOne {
	fuo.mutation.SetOwnerID(id)
	return fuo
}

// SetOwner sets the "owner" edge to the User entity.
func (fuo *FormUpdateOne) SetOwner(u *User) *FormUpdateOne {
	return fuo.SetOwnerID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (fuo *FormUpdateOne) AddQuestionIDs(ids ...int) *FormUpdateOne {
	fuo.mutation.AddQuestionIDs(ids...)
	return fuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (fuo *FormUpdateOne) AddQuestions(q ...*Question) *FormUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.AddQuestionIDs(ids...)
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (fuo *FormUpdateOne) AddResponseIDs(ids ...int) *FormUpdateOne {
	fuo.mutation.AddResponseIDs(ids...)
	return fuo
}

// AddResponses adds the "responses" edges to the Response entity.
func (fuo *FormUpdateOne) AddResponses(r ...*Response) *FormUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.AddResponseIDs(ids...)
}

// Mutation returns the FormMutation object of the builder.
func (fuo *FormUpdateOne) Mutation() *FormMutation {
	return fuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fuo *FormUpdateOne) ClearOwner() *FormUpdateOne {
	fuo.mutation.ClearOwner()
	return fuo
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (fuo *FormUpdateOne) ClearQuestions() *FormUpdateOne {
	fuo.mutation.ClearQuestions()
	return fuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (fuo *FormUpdateOne) RemoveQuestionIDs(ids ...int) *FormUpdateOne {
	fuo.mutation.RemoveQuestionIDs(ids...)
	return fuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (fuo *FormUpdateOne) RemoveQuestions(q ...*Question) *FormUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.RemoveQuestionIDs(ids...)
}

// ClearResponses clears all "responses" edges to the Response entity.
func (fuo *FormUpdateOne) ClearResponses() *FormUpdateOne {
	fuo.mutation.ClearResponses()
	return fuo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (fuo *FormUpdateOne) RemoveResponseIDs(ids ...int) *FormUpdateOne {
	fuo.mutation.RemoveResponseIDs(ids...)
	return fuo
}

// RemoveResponses removes "responses" edges to Response entities.
func (fuo *FormUpdateOne) RemoveResponses(r ...*Response) *FormUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.RemoveResponseIDs(ids...)
}

// Where appends a list predicates to the FormUpdate builder.
func (fuo *FormUpdateOne) Where(ps ...predicate.Form) *FormUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FormUpdateOne) Select(field string, fields ...string) *FormUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Form entity.
func (fuo *FormUpdateOne) Save(ctx context.Context) (*Form, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FormUpdateOne) SaveX(ctx context.Context) *Form {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FormUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FormUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FormUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := form.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FormUpdateOne) check() error {
	if v, ok := fuo.mutation.Title(); ok {
		if err := form.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Form.title": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Slug(); ok {
		if err := form.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Form.slug": %w`, err)}
		}
	}
	if fuo.mutation.OwnerCleared() && len(fuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Form.owner"`)
	}
	return nil
}

func (fuo *FormUpdateOne) sqlSave(ctx context.Context) (_node *Form, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(form.Table, form.Columns, sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Form.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, form.FieldID)
		for _, f := range fields {
			if !form.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != form.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(form.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(form.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(form.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.Published(); ok {
		_spec.SetField(form.FieldPublished, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Slug(); ok {
		_spec.SetField(form.FieldSlug, field.TypeString, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(form.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form.OwnerTable,
			Columns: []string{form.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form.OwnerTable,
			Columns: []string{form.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !fuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.QuestionsTable,
			Columns: []string{form.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !fuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form.ResponsesTable,
			Columns: []string{form.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Form{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
