// Code generated by ent, DO NOT EDIT.

package response

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldID, id))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubmittedAt, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldCompleted, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldUserAgent, v))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldSubmittedAt, v))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldCompleted, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldUserAgent, v))
}

// HasForm applies the HasEdge predicate on the "form" edge.
func HasForm() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormWith applies the HasEdge predicate on the "form" edge with a given conditions (other predicates).
func HasFormWith(preds ...predicate.Form) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswers applies the HasEdge predicate on the "answers" edge.
func HasAnswers() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswersTable, AnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswersWith applies the HasEdge predicate on the "answers" edge with a given conditions (other predicates).
func HasAnswersWith(preds ...predicate.Answer) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Response) predicate.Response {
	return predicate.Response(sql.NotPredicates(p))
}
