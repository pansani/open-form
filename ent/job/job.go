// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQueue holds the string denoting the queue field in the database.
	FieldQueue = "queue"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldAttempts holds the string denoting the attempts field in the database.
	FieldAttempts = "attempts"
	// FieldMaxAttempts holds the string denoting the max_attempts field in the database.
	FieldMaxAttempts = "max_attempts"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// Table holds the table name of the job in the database.
	Table = "jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldQueue,
	FieldPayload,
	FieldAttempts,
	FieldMaxAttempts,
	FieldStatus,
	FieldError,
	FieldCreatedAt,
	FieldProcessedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// QueueValidator is a validator for the "queue" field. It is called by the builders before save.
	QueueValidator func(string) error
	// DefaultAttempts holds the default value on creation for the "attempts" field.
	DefaultAttempts int
	// DefaultMaxAttempts holds the default value on creation for the "max_attempts" field.
	DefaultMaxAttempts int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending    Status = "pending"
	StatusProcessing Status = "processing"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusProcessing, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQueue orders the results by the queue field.
func ByQueue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueue, opts...).ToFunc()
}

// ByAttempts orders the results by the attempts field.
func ByAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempts, opts...).ToFunc()
}

// ByMaxAttempts orders the results by the max_attempts field.
func ByMaxAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxAttempts, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}
