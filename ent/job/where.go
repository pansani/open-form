// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Queue applies equality check predicate on the "queue" field. It's identical to QueueEQ.
func Queue(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldQueue, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttempts, v))
}

// MaxAttempts applies equality check predicate on the "max_attempts" field. It's identical to MaxAttemptsEQ.
func MaxAttempts(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxAttempts, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProcessedAt, v))
}

// QueueEQ applies the EQ predicate on the "queue" field.
func QueueEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldQueue, v))
}

// QueueNEQ applies the NEQ predicate on the "queue" field.
func QueueNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldQueue, v))
}

// QueueIn applies the In predicate on the "queue" field.
func QueueIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldQueue, vs...))
}

// QueueNotIn applies the NotIn predicate on the "queue" field.
func QueueNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldQueue, vs...))
}

// QueueGT applies the GT predicate on the "queue" field.
func QueueGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldQueue, v))
}

// QueueGTE applies the GTE predicate on the "queue" field.
func QueueGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldQueue, v))
}

// QueueLT applies the LT predicate on the "queue" field.
func QueueLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldQueue, v))
}

// QueueLTE applies the LTE predicate on the "queue" field.
func QueueLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldQueue, v))
}

// QueueContains applies the Contains predicate on the "queue" field.
func QueueContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldQueue, v))
}

// QueueHasPrefix applies the HasPrefix predicate on the "queue" field.
func QueueHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldQueue, v))
}

// QueueHasSuffix applies the HasSuffix predicate on the "queue" field.
func QueueHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldQueue, v))
}

// QueueEqualFold applies the EqualFold predicate on the "queue" field.
func QueueEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldQueue, v))
}

// QueueContainsFold applies the ContainsFold predicate on the "queue" field.
func QueueContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldQueue, v))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAttempts, v))
}

// MaxAttemptsEQ applies the EQ predicate on the "max_attempts" field.
func MaxAttemptsEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxAttempts, v))
}

// MaxAttemptsNEQ applies the NEQ predicate on the "max_attempts" field.
func MaxAttemptsNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldMaxAttempts, v))
}

// MaxAttemptsIn applies the In predicate on the "max_attempts" field.
func MaxAttemptsIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldMaxAttempts, vs...))
}

// MaxAttemptsNotIn applies the NotIn predicate on the "max_attempts" field.
func MaxAttemptsNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldMaxAttempts, vs...))
}

// MaxAttemptsGT applies the GT predicate on the "max_attempts" field.
func MaxAttemptsGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldMaxAttempts, v))
}

// MaxAttemptsGTE applies the GTE predicate on the "max_attempts" field.
func MaxAttemptsGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldMaxAttempts, v))
}

// MaxAttemptsLT applies the LT predicate on the "max_attempts" field.
func MaxAttemptsLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldMaxAttempts, v))
}

// MaxAttemptsLTE applies the LTE predicate on the "max_attempts" field.
func MaxAttemptsLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldMaxAttempts, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldProcessedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
